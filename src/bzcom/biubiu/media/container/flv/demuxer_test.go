package flv

import (
	"bzcom/biubiu/media/av"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestDemuxerVideo(t *testing.T) {
	at := assert.New(t)
	d := NewDemuxer()

	//  demux video  seq
	videoSequnce := []byte{
		0x17, 0x00, 0x00, 0x00, 0x00, 0x01, 0x64, 0x00, 0x15, 0xff, 0xe1, 0x00, 0x1b, 0x67,
		0x64, 0x00, 0x15, 0xac, 0xc8, 0x40, 0x21, 0x09, 0xfe, 0x23, 0x01, 0x10, 0x00, 0x00,
		0x03, 0x00, 0x10, 0x00, 0x00, 0x03, 0x01, 0xe8, 0xf1, 0x62, 0xd9, 0x60, 0x01, 0x00,
		0x05, 0x68, 0xe9, 0x3b, 0x2c, 0x8b, 0x00, 0x00, 0x00, 0x14, 0x62, 0x74, 0x72, 0x74,
	}
	packet := av.Packet{
		IsVideo: true,
		Data:    videoSequnce,
	}
	p, err := d.Demux(&packet)
	at.Equal(err, nil)
	f, ok := p.Header.(av.VideoPacketHeader)
	at.Equal(ok, true)
	at.Equal(int(f.CodecID()), av.VIDEO_H264)
	at.Equal(f.IsSeq(), true)
	at.Equal(f.IsKeyFrame(), true)
	at.Equal(int(f.CompositionTime()), 0)
	at.Equal(p.Data, []byte{0x01, 0x64, 0x00, 0x15, 0xff, 0xe1, 0x00, 0x1b, 0x67,
		0x64, 0x00, 0x15, 0xac, 0xc8, 0x40, 0x21, 0x09, 0xfe, 0x23, 0x01, 0x10, 0x00, 0x00,
		0x03, 0x00, 0x10, 0x00, 0x00, 0x03, 0x01, 0xe8, 0xf1, 0x62, 0xd9, 0x60, 0x01, 0x00,
		0x05, 0x68, 0xe9, 0x3b, 0x2c, 0x8b, 0x00, 0x00, 0x00, 0x14, 0x62, 0x74, 0x72, 0x74,
	})

	// demux video key
	videoKeyFrame := []byte{0x17, 0x01, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x10, 0x65, 0x88, 0x84,
		0x00, 0x23, 0xff, 0xfd, 0x54, 0xa0, 0x06, 0x28, 0x78, 0x14, 0xd6, 0xdb, 0x4d}
	p.Data = videoKeyFrame
	p, err = d.Demux(&packet)
	at.Equal(err, nil)
	f, ok = p.Header.(av.VideoPacketHeader)
	at.Equal(ok, true)
	at.Equal(int(f.CodecID()), av.VIDEO_H264)
	at.Equal(f.IsSeq(), false)
	at.Equal(f.IsKeyFrame(), true)
	at.Equal(int(f.CompositionTime()), 133)
	at.Equal(p.Data, videoKeyFrame[5:])
}

func TestDemuxerAudio(t *testing.T) {
	at := assert.New(t)
	d := NewDemuxer()
	audioSequence := []byte{0xaf, 0x00, 0x13, 0x90, 0x56, 0xe5, 0xa5, 0x48, 0x00}
	packet := av.Packet{
		IsVideo: false,
		Data:    audioSequence,
	}
	p, err := d.Demux(&packet)
	at.Equal(err, nil)
	f, ok := p.Header.(av.AudioPacketHeader)
	at.Equal(ok, true)
	at.Equal(int(f.SoundFormat()), 10)
	at.Equal(p.Data, audioSequence[2:])
}
