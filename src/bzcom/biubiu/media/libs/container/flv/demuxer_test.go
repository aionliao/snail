package flv

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestDemuxerVideo(t *testing.T) {
	at := assert.New(t)
	d := newDemuxer()

	//  demux video  seq
	videoSequnce := []byte{
		0x17, 0x00, 0x00, 0x00, 0x00, 0x01, 0x64, 0x00, 0x15, 0xff, 0xe1, 0x00, 0x1b, 0x67,
		0x64, 0x00, 0x15, 0xac, 0xc8, 0x40, 0x21, 0x09, 0xfe, 0x23, 0x01, 0x10, 0x00, 0x00,
		0x03, 0x00, 0x10, 0x00, 0x00, 0x03, 0x01, 0xe8, 0xf1, 0x62, 0xd9, 0x60, 0x01, 0x00,
		0x05, 0x68, 0xe9, 0x3b, 0x2c, 0x8b, 0x00, 0x00, 0x00, 0x14, 0x62, 0x74, 0x72, 0x74,
	}
	tag, err := d.Demux(videoSequnce, TAG_VIDEO)
	at.Equal(err, nil)
	at.Equal(int(tag.FT.Type), TAG_VIDEO)
	at.Equal(int(tag.MT.AVCPacketType), AVC_SEQHDR)
	at.Equal(int(tag.MT.CodecID), VIDEO_H264)
	at.Equal(int(tag.MT.FrameType), FRAME_KEY)
	at.Equal(int(tag.MT.CompositionTime), 0)
	at.Equal(tag.Data, []byte{0x01, 0x64, 0x00, 0x15, 0xff, 0xe1, 0x00, 0x1b, 0x67,
		0x64, 0x00, 0x15, 0xac, 0xc8, 0x40, 0x21, 0x09, 0xfe, 0x23, 0x01, 0x10, 0x00, 0x00,
		0x03, 0x00, 0x10, 0x00, 0x00, 0x03, 0x01, 0xe8, 0xf1, 0x62, 0xd9, 0x60, 0x01, 0x00,
		0x05, 0x68, 0xe9, 0x3b, 0x2c, 0x8b, 0x00, 0x00, 0x00, 0x14, 0x62, 0x74, 0x72, 0x74,
	})

	// demux video key
	videoKeyFrame := []byte{0x17, 0x01, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x10, 0x65, 0x88, 0x84,
		0x00, 0x23, 0xff, 0xfd, 0x54, 0xa0, 0x06, 0x28, 0x78, 0x14, 0xd6, 0xdb, 0x4d}

	tag, err = d.Demux(videoKeyFrame, TAG_VIDEO)
	at.Equal(err, nil)
	at.Equal(int(tag.FT.Type), TAG_VIDEO)
	at.Equal(int(tag.MT.AVCPacketType), AVC_NALU)
	at.Equal(int(tag.MT.CodecID), VIDEO_H264)
	at.Equal(int(tag.MT.FrameType), FRAME_KEY)
	at.Equal(int(tag.MT.CompositionTime), 133)
	at.Equal(tag.Data, videoKeyFrame[5:])
}

func TestDemuxerAudio(t *testing.T) {
	at := assert.New(t)
	d := newDemuxer()
	audioSequence := []byte{0xaf, 0x00, 0x13, 0x90, 0x56, 0xe5, 0xa5, 0x48, 0x00}

	tag, err := d.Demux(audioSequence, TAG_AUDIO)
	at.Equal(err, nil)
	at.Equal(int(tag.FT.Type), TAG_AUDIO)
	at.Equal(int(tag.MT.AVCPacketType), AAC_SEQHDR)
	at.Equal(int(tag.MT.SoundFormat), SOUND_AAC)
	at.Equal(int(tag.MT.CompositionTime), 0)
	at.Equal(tag.Data, audioSequence[2:])

}
